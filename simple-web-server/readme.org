#+TITLE: Readme

#+begin_verse
Fuente
https://aosabook.org/en/500L/a-simple-web-server.html

(si bien seguí la guía en un 90%, hice algunas modificaciones aquí y allá)
#+end_src

La idea es crear un servidor web desde cero, para entender como funciona a bajo nivel.
* Introducción :ATTACH:
:PROPERTIES:
:ID:       b630d403-628f-4203-899b-123523f3f7a1
:END:

Las aplicaciones TCP/IP se comunican a través de sockets (IP+puerto)

HTTP permite que un cliente envíe una solicitud especificando qué recurso desea sobre un socket. El servidor responde con datos generados estática o dinámicamente.

Una petición (Request) HTTP tiene el siguiente esquema:

[[attachment:_20200918_173019screenshot.png]]

Una respuesta (Response) se tiene el siguente formato:

[[attachment:_20200918_173202screenshot.png]]

Una librería sencilla de usar es =Requests= (se debe instalar por separado)

Ejemplo
#+begin_src  python
import requests

response = requests.get("http://aosabook.org/en/500L/web-server/testpage.html")

print(response)   # objeto
print(response.status_code) # 200 OK
print(response.headers)  # cabeceras
print(response.text) # html
#+end_src
* Programa
Tiene 6 partes:
1. Escuchar solicitudes entrantes
2. Parsear la solicitud
3. Entender la solicitud
4. Generar o buscar los datos
5. Formatear los datos como HTML
6. Enviarlos

** Servir una página estática básica
Python3 incluye la librería =http.server=, la cual disponibiliza una clase básica =http.server.HTTPServer=.

Para instanciarla solo es necesario indicarle en qué socket escuchará el servidor y asignarle una clase para atender solicitudes =http.server.BaseHTTPRequestHandler=.

En la clase =http.server.BaseHTTPRequestHandler= podemos definir las cabeceras HTTP que serán enviadas, así como también el contenido HTML de la página.


#+begin_src python
import http.server


class RequestHandler(http.server.BaseHTTPRequestHandler):
    """Regreso una página básica"""

    page = """<html>
            <body>
            <h1>Hola</h1>
            <p> Mundis </p>
            </body>
            </html>""".encode()


    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-Type", "text/html")
        self.send_header("Content-Length", str(len(self.page)))
        self.end_headers()
        self.wfile.write(self.page)


if __name__ == "__main__":
    serverAddress = ("", 8080)
    server = http.server.HTTPServer(serverAddress, RequestHandler)

    try:
        server.serve_forever()
    except KeyboardInterrupt:
        pass
    server.close()
#+end_src

Al visitar =http://localhost:8080= se observa la página básica definida en la variable =page=.

** Mostrar valores calculados dinámicamente :ATTACH:
:PROPERTIES:
:ID:       75de248d-43be-4816-aabf-00e927de38b0
:END:
Una aplicación web, además de servir HTML estático, tiene la capacidad de realizar operaciones con datos antes de mostrarlos.

Para incluir esta funcionalidad, podemos definir una variable con una plantilla HTML:

#+begin_src python
template = '''\
<html>
<body>
<table>
<tr>  <td>Header</td>         <td>Value</td>          </tr>
<tr>  <td>Date and time</td>  <td>{date_time}</td>    </tr>
<tr>  <td>Client host</td>    <td>{client_host}</td>  </tr>
<tr>  <td>Client port</td>    <td>{client_port}s</td> </tr>
<tr>  <td>Command</td>        <td>{command}</td>      </tr>
<tr>  <td>Path</td>           <td>{path}</td>         </tr>
</table>
</body>
</html>
'''
#+end_src
Los valores entre llaves ={}= serán calculados al momento de realizar la solicitud GET HTTP.

Para esto, alcanza con agregar dos métodos nuevos en la clase =RequestHandler=:

#+begin_src python
    def create_page(self):
        values = {
            'date_time': self.date_time_string(),
            'client_host': self.client_address[0],
            'client_port': self.client_address[1],
            'command': self.command,
            'path': self.path
        }
        page = self.template.format(**values)
        print(page)
        return page

    def send_page(self):
        page = self.create_page()
        self.send_response(200)
        self.send_header("Content-Type", "text/html")
        self.end_headers()
        self.wfile.write(page.encode())
#+end_src
    En =create_page= se formatea el HTML y se guarda el resultado en la variable =page=.
   
    Luego en =send_page= se envía el HTML contenido en la variable al output stream =wfile=. Vale aclarar que al ser un stream, podriamos continuar escribiendo en él, sin embargo el proceso será bloqueante.

    Por ejemplo:
    #+begin_src python
    def send_page(self):
        page = self.create_page()
        self.send_response(200)
        self.send_header("Content-Type", "text/html")
        self.end_headers()
        self.wfile.write(page.encode())
        for i in range(5):
            self.wfile.write(f"<b> {i} </b> </br>".encode())
            time.sleep(1)
    #+end_src
   
    Producirá:
 [[attachment:_20200927_134418screenshot.png]]

 Sin embargo, la página tardará 5 segundos en cargarse.
** Servir HTML estático desde el disco
La idea ahora es que _además_ de servir una página dinámica con información sobre la solicitud, pueda servir html que se encuentra almancenado en el disco.

Para ello lo primero que se debe hacer es modificar el método =send_page= para que acepte el parámetro nuevo =content=. Éste será html enviado desde otra función, y en el caso de que no se obtenga nada, se creará la página con información sobre la solicitud.

#+begin_src python
    def send_page(self, content = None):
        if content is None:
            content = self.create_page().encode()
        self.send_response(200)
        self.send_header("Content-Type", "text/html")
        self.end_headers()
        self.wfile.write(content)
#+end_src

También el método =do_GET= es modificado, de tal manera que compruebe en primer lugar que el archivo solicitado en el GET Request exista. En caso de que no lo haga, levantará un error.
#+begin_src python
    def do_GET(self):
        try:
            full_path = os.getcwd() + self.path
            if not os.path.exists(full_path) and not (
                "favicon" or "icon.png" in full_path
            ):
                raise Exception(f"{self.path} not found")
            elif os.path.isfile(full_path):
                self.handle_file(full_path)
            else:
                raise Exception(f"{self.path} is unknown object")

        except Exception as msg:
            self.handle_error(msg)
#+end_src
La función de error =handle_error= simplemente imprime el mensaje y muestra la página con información de la solicitud.

Finalmente la el método =handle_file= es el encargado de leer el archivo en el disco y enviarlo al método =send_page=

#+begin_src python
    def handle_file(self, full_path):
        try:
            html_file = open(full_path, "r")
            content = html_file.read()
        except Exception as msg:
            self.handle_error(msg)
        self.send_page(content.encode())
#+end_src
** Mostrar un listado del directorio
En este paso, queremos que el servidor muestre el contenido de un directorio, si es que la URL apunta a un directorio válido.

Si la ruta es =/= podemos contruir y enviar el archivo =index.html= con todos los directorios conocidos.

El primer paso consiste en modificar el método =do_GET= para preguntar qué clase de objeto es solicitado por una URL.
Se podría crear una secuencia de =if= =else= (similar a =switch= =case= en C), el problema de esto es que para cada caso nuevo se debería agregar una condición nueva y puede volverse dificil de leer.

Una solución más elegante es definir clases con dos métodos: =act= y =test=. Al llamar al  método =test= se comprueba si el caso aplica, en caso afirmativo se llama al método =act=.
#+begin_src python
def do_GET(self):
    try:
        # construir el full path
        full_path = os.getcwd() + self.path
        # iterar por cada caso, comprobar si aplica
        # y ejecutar una accion de ser así
        for case in self.Cases:
            # instancio la clase case
            handler = case()
            # para el metodo test sólo requiero el full_path
            if handler.test(full_path):
                # en el metodo act envío el propio objeto RequestHandler
                # ya que espero que llame un metodo (handle_file o handle_error)
                handler.act(self)
                # solo ejecuto el handler adecuado
                break
#+end_src

El atributo =Cases= se define dentro de la clase =RequestHandler=
#+begin_src python
class RequestHandler(http.server.BaseHTTPRequestHandler):
    Cases = [case_directory(), case_file(), case_no_file(), case_error()]
#+end_src

Finalmente, es necesario definir las clases que definen los métodos =test= y =act= en cada caso:
#+begin_src python
class case_directory:
    def test(self, handler):
        return os.path.isdir(handler.full_path)

    def act(self, handler):
        pass

class case_file:
    def test(self, handler):
        return os.path.isfile(handler.full_path)

    def act(self, handler):
        handler.handle_file()

class case_invalid_path:
    def test(self, handler):
        return not os.path.exists(handler.full_path)

    def act(self, handler):
        handler.send_page(status=404)

class case_error:
    def test(self, handler):
        return True

    def act(self, handler):
        handler.handle_error(f"{handler.path} no encontrado")
#+end_src
Si bien la lógica es un poco más obtusa, pues para saber lo que hace el método =do_GET= también debemos referirnos a cada clase =case_=, hemos ganado mantenibilidad y la capacidad de agregar nuevos casos con mínimas modificaciones (bastaría con agregar el nuevo caso en la variable =Case= dentro de la clase =RequestHandler=)

** TODO The CGI Protocol

Of course, most people won't want to edit the source of their web server in order to add new functionality. To save them from having to do so, servers have always supported a mechanism called the Common Gateway Interface (CGI), which provides a standard way for a web server to run an external program in order to satisfy a request.
